#!/usr/bin/env ruby

$: << File.expand_path('../lib', File.dirname(__FILE__))

require 'rclconf'
require 'logger'
require 'drb'
require 'drb/ssl'
require 'drb/timeridconv'
require 'digest/sha2'
require 'odba/18_19_loading_compatibility'

default_dir = File.join('/etc', 'yus')
default_config_files = [
  File.join(default_dir, 'yus.yml'),
]
pp default_config_files

defaults = {
  'cleaner_interval' =>  300,
  'config'			      => default_config_files,
  'db_name'           => 'yus',
  'db_user'           => 'yus',
  'db_auth'           => 'yus',
  'db_backend'        => :psql,
  'digest'            => Digest::SHA256,
  'log_file'          => STDERR,
  'log_level'         => 'INFO',
  'persistence'       => 'odba',
  'root_name'         => 'admin',
  'root_pass'         => nil,
  'server_url'        => 'druby://127.0.0.1:9997',
  'session_timeout'   => 300,
  'ssl_key'           => File.expand_path('../data/yus.key',
                                          File.dirname(__FILE__)),
  'ssl_cert'          => File.expand_path('../data/yus.crt',
                                          File.dirname(__FILE__)),
  'token_lifetime'    => 30,
  'yus_dir'           => default_dir,
}

config = RCLConf::RCLConf.new(ARGV, defaults)
config.load(config.config)

require File.join('yus', 'persistence', config.persistence)
persistence = nil
require 'odba/connection_pool'
require 'odba/drbwrapper'
DRb.install_id_conv ODBA::DRbIdConv.new
ODBA.storage.dbi = ODBA::ConnectionPool.new("DBI:Pg:#{config.db_name}",
                                            config.db_user, config.db_auth)
ODBA.cache.setup
persistence = Yus::Persistence::Odba.new

log_file = config.log_file
if(log_file.is_a?(String))
	FileUtils.mkdir_p(File.dirname(log_file))
	log_file = File.open(log_file, 'a')
	at_exit { log_file.close }
end
logger = Logger.new(log_file)
logger.level = Logger.const_get(config.log_level)

begin
  server = Yus::Server.new(persistence, config, logger)
  server.extend(DRbUndumped)

  url = config.server_url
  drbconf = {}
  case url
  when /drbssl/
    keypath = File.expand_path(config.ssl_key, config.yus_dir)
    certpath = File.expand_path(config.ssl_cert, config.yus_dir)
    drbconf.update({
      :SSLPrivateKey => OpenSSL::PKey::RSA.new(File.read(keypath)),
      :SSLCertificate => OpenSSL::X509::Certificate.new(File.read(certpath)),
    })
  end
  DRb.start_service(url, server, drbconf)
	logger.info('start') { sprintf("starting yus-server on %s", url) }
  DRb.thread.join
rescue Exception => error
	logger.error('fatal') { error }
	raise
end
