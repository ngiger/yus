#!/usr/bin/env ruby

$: << File.expand_path('../lib', File.dirname(__FILE__))

require 'rubygems' if RUBY_VERSION.match('1.8.6')
require 'rclconf'
require 'logger'
require 'drb'
require 'drb/ssl'
require 'drb/timeridconv'
require 'digest/sha2'

default_dir = File.join(ENV['HOME'], '.yus')
default_config_files = [
  File.join(default_dir, 'yus.yml'),
  '/etc/yus/yus.yml',
]
defaults = {
  'cleaning_interval' =>  300,
  'config'			      => default_config_files,
  'db_host'           => 'localhost',
  'db_name'           => 'yus',
  'db_user'           => 'yus',
  'db_auth'           => 'yus',
  'db_backend'        => :psql,
  'digest'            => Digest::SHA256,
  'log_file'          => STDERR,
  'log_level'         => 'INFO',
  'persistence'       => 'odba',
  'root_name'         => 'admin',
  'root_pass'         => nil,
  'server_url'        => 'drbssl://localhost:9997',
  'session_timeout'   => 300,
  'ssl_key'           => File.expand_path('../data/yus.key', 
                                          File.dirname(__FILE__)),
  'ssl_cert'          => File.expand_path('../data/yus.crt', 
                                          File.dirname(__FILE__)),
  'token_lifetime'    => 30,
  'yus_dir'           => default_dir,
}

config = RCLConf::RCLConf.new(ARGV, defaults)
config.load(config.config)

if File.exist?(config.ssl_key) && File.exist?(config.ssl_cert)
  puts "SSL already set up with #{config.ssl_key} #{config.ssl_cert}"
else
  unless File.exist?(config.ssl_key)
    cmd = "ssh-keygen -t rsa -f #{config.ssl_key.sub('.key','')}"
    unless system(cmd)
      puts "Failed creating key using: #{cmd}"
      exit(1)
    end
  end
  cmd ="openssl req -key #{config.ssl_key} -out #{config.ssl_cert}"
  cmd += " -new -x509 -batch -passin pass:''"
  puts cmd
  unless system(cmd)
    puts "Failed creating certificate using: #{cmd}"
    exit(1)
  end
end

require File.join('yus', 'persistence', config.persistence)
persistence = nil
case config.persistence
when 'odba'
  require 'odba/connection_pool'
  require 'odba/drbwrapper'
  DRb.install_id_conv ODBA::DRbIdConv.new
  ODBA.storage.dbi = ODBA::ConnectionPool.new("DBI:Pg:#{config.db_name}:#{config.db_host}",
                                             config.db_user, config.db_auth)
  ODBA.cache.setup
  persistence = Yus::Persistence::Odba.new
when 'og'
  DRb.install_id_conv DRb::TimerIdConv.new
  Og.setup({
    :name     => config.db_name,
    :user     => config.db_user,
    :password => config.db_auth,
    :store    => config.db_backend,
    :evolve_schema => true,
  })
  persistence = Yus::Persistence::Og.new
end

log_file = config.log_file
if(log_file.is_a?(String))
	FileUtils.mkdir_p(File.dirname(log_file))
	log_file = File.open(log_file, 'a')
	at_exit { log_file.close }
end
logger = Logger.new(log_file)
logger.level = Logger.const_get(config.log_level)

begin
  server = Yus::Server.new(persistence, config, logger)
  server.extend(DRbUndumped)

  url = config.server_url
  drbconf = {}
  case url
  when /drbssl/
    keypath = File.expand_path(config.ssl_key, config.yus_dir)
    certpath = File.expand_path(config.ssl_cert, config.yus_dir)
    drbconf.update({      
      :SSLPrivateKey => OpenSSL::PKey::RSA.new(File.read(keypath)),
      :SSLCertificate => OpenSSL::X509::Certificate.new(File.read(certpath)),
    })
  end
  url.untaint
  DRb.start_service(url, server, drbconf)
  $SAFE = 1
	logger.info('start') { 
		sprintf("starting yus-server on %s", url) }
  DRb.thread.join
rescue Exception => error
	logger.error('fatal') { error }
	raise
end
